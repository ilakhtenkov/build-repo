name: GitHub Actions Capabilities test

run-name: GitHub Actions Capabilities test

on:
  workflow_dispatch:
    inputs:
      is_snapshot:
        type: boolean
        description: Is it a snapshot build
        default: true

env:
  env: DEV
  VERSION_PREFIX: >-
    ${{
      inputs.is_snapshot == true && 'SNAPSHOT' ||
      '' 
    }}

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo ${GITHUB_CONTEXT} | jq .
    - name: 'Workflow commands'
      run: |
        echo "::notice title='It is very important':: Showing context"
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-a-notice-message
    - name: 'If boolean'
      run: echo "version prefix is ${VERSION_PREFIX}"
    - name: Format
      run: |
        echo ${{ format('{1}: {0} tiggered run on {1}.', github.actor, env.env) }}
    - name: IF
      env:
        IS_RELEASE_BUILD: "false"
      run: |
        if [[ ${IS_RELEASE_BUILD} == "true" ]]; then
          SUFFIX=""
        else
          SUFFIX="-SNAPSHOT"
        fi
        echo ${SUFFIX}
    - name: Get prelast release
      uses: actions/github-script@v7
      env:
          GITHUB_REPOSITORY: ${{ github.repository }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          async function getPreLastRelease() {
            try {
              const { owner, repo } = getOwnerAndRepo();

              const { data: releases } = await github.request('GET /repos/{owner}/{repo}/releases', {
                owner: owner,
                repo: repo,
                per_page: 2,
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              })
          
              if (releases.length < 2) {
                core.warning("There are less than 2 releases in the repository.");
                return;
              }
              const preLastReleaseTag = releases[1].tag_name;
              core.info(`Pre-last release tag: ${preLastReleaseTag}`);
            } catch (error) {
              console.error("Error fetching pre-last release:", error);
            }
            return preLastReleaseTag
          }
          
          function getOwnerAndRepo() {
            const repoUrl = process.env.GITHUB_REPOSITORY;
            const [owner, repo] = repoUrl.split("/");
            return { owner, repo };
          }
          
          return getPreLastRelease();
